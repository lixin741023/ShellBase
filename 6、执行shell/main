// 执行 shell 的方法有很多种，但总的来说可以归为2大类：

// 1、在新的 进程 中运行；
// (我们需要先通过 chmod +x ./0.base 命令，给我们的 0.base 文件加上可执行权限哦～)

// 1.1
// |>
// 在命令行中键入：./0.base
// <|
// ./表示当前目录，整条命令的意思是执行当前目录下的 0.base 脚本。
// 如果不写./，Linux 会到系统路径（由 PATH 环境变量指定）下查找 0.base，
// 而系统路径下显然不存在这个脚本，所以会执行失败。
// ******
// ******
// 我们在键入命令的时候，没有明确告知 shell 用哪个 解释器 来解释这个脚本。
// （用 python？ 用 bash？ 用 sh？ …………）
// 所以通过这种方式运行脚本，脚本文件第一行的 #!/bin/bash 一定要写对，
// 一定要明确指出想要用哪一种 解释器 来解释哦～

// 1.2
// |>
// 将 Shell 脚本作为参数传递给 Bash 解释器
// |>
// /bin/bash 0.base
// 或者
// bash 0.base
// <|
// 上面的写法在命令行中明确指定了使用 bash解释器 来解释这个脚本，
// 所以 脚本内容第一行的声明将被忽略。


// 2、在现在的 shell进程 中运行；
// 需要通过 shell内置命令：source
// 它会读取脚本文件中的代码，
// 并 依次 执行所有语句。
// 你也可以理解为，source 命令会 强制依次 执行脚本文件中的全部命令，而忽略脚本文件的权限。
// |>
// source 0.base
// 或者简写：
// . 0.base



